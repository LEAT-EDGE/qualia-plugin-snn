[bench]
name = "DVSGesture_SCNN_int16_Linux"
seed = 2
first_run = 1
last_run = 1
use_test_as_valid = true
plugins = ['qualia_plugin_snn']

[learningframework]
kind = 'SpikingJellyMultiStepTimeStepsInData'
params.devices=[1]

[experimenttracking]
kind = 'ClearML'
params.project_name = 'qualia-plugin-snn'
params.task_name = 'DVSGesture_SCNN_int16_Linux'

[deploy]
#target = 'SPLEAT'
#converter.kind = 'SPLEAT'
#converter.params.output_feature_maps = [1, 2, 3, 4]
target = 'Linux'
converter.kind = 'QualiaCodeGen'
converter.params.timestep_mode = 'iterate' # Required for TimeStepsInData
quantize = ['int16']
optimize = ['']

[dataset]
kind = 'DVSGesture'
#kind = 'DVSGestureWithPreprocessing'
params.path = "data/DVS128Gesture/"
params.data_type = 'frame'
#params.duration = 100000
#params.timesteps = 8

[[preprocessing]]
kind = "IntegrateEventsByFixedDuration"
params.duration = 100000

[[preprocessing]]
kind = "Group2TimeStepsBySample"
params.timesteps = 8

[[preprocessing]]
kind = "Class2BinMatrix"

[[data_augmentation]]
kind = "ResizedCrop"
params.size = [128, 128]
params.scale = [0.85, 1.15]
params.ratio = [0.85, 1.15]
params.interpolation_mode = 'nearest'

[[data_augmentation]]
kind = "Rotation2D"
params.angle = [-10, 10]
params.interpolation_mode = 'nearest'

[[data_augmentation]]
kind = "ExponentialNoise"
params.rate = 2.5
params.round_mode = 'floor'

[[postprocessing]]
kind = "FuseBatchNorm"
export = true
params.evaluate = false

# Not actually doing QAT since epochs=0, only used to generate activation ranges for QualiaCodeGen
[[postprocessing]]
kind = "QuantizationAwareTraining"
export = true
params.epochs = 0
params.batch_size = 256
params.model.params.quant_params.bits           = 16
params.model.params.quant_params.quantype       = "fxp"
params.model.params.quant_params.roundtype      = "floor"
params.model.params.quant_params.range_setting  = "minmax"
params.model.params.quant_params.LSQ            = false
#params.model.params.quant_params.input.quant_enable = false # Broken with Qualia-CodeGen
#params.model.params.quant_params.bias.quant_enable = true // Disable for now to avoid potential issue with CMSIS-NN
params.model.params.quant_params.force_q        = 9
params.evaluate_before = false

[model_template]
kind = 'SCNN'
epochs = 0
batch_size = 256
params.input_shape = [128, 128, 2]
load = true
train = false
evaluate = false

[model_template.optimizer]
kind = "Adam"
params.lr               = 0.01
params.weight_decay	= 5e-4

[model_template.optimizer.scheduler]
kind = "MultiStepLR"
params.milestones	= [15, 30, 60, 90, 110, 115]
params.gamma		= 0.25

[[model]]
name = 'dvsgesture_scnn'
params.dims = 2
params.filters = [16, 32, 64, 128, 128, 256, 256]
params.kernel_sizes = [7, 3, 3, 3, 3, 3, 3]
params.pool_sizes = [0, 0, 0, 0, 0, 0, 0]
params.dropouts = [0, 0, 0, 0, 0, 0, 0]
params.strides = [2, 2, 2, 2, 2, 2, 2]
params.paddings = [3, 1, 1, 1, 1, 1, 1]
params.fc_units = []
params.timesteps = 8
params.neuron.kind = 'LIFNode'
params.neuron.params.v_threshold = 1.0
params.neuron.params.v_reset = false
params.neuron.params.tau = 2.0
params.neuron.params.step_mode = 'm' # Multi-step mode, make sure to use SpikingJellyMultiStep learningframework
#params.neuron.params.backend = 'cupy'
params.neuron.params.backend = 'torch'
params.gsp = true
params.batch_norm = true
disabled = false

[[model]]
name = 'dvsgesture_scnn_small'
params.dims = 2
params.filters = [16, 32, 64, 128, 256]
params.kernel_sizes = [7, 3, 3, 3, 3]
params.pool_sizes = [0, 0, 0, 0, 0]
params.dropouts = [0, 0, 0, 0, 0]
params.strides = [2, 2, 2, 2, 2]
params.paddings = [3, 1, 1, 1, 1]
params.fc_units = []
params.timesteps = 4
params.neuron.kind = 'LIFNode'
params.neuron.params.v_threshold = 1.0
params.neuron.params.v_reset = false
params.neuron.params.tau = 2.0
params.neuron.params.step_mode = 'm' # Multi-step mode, make sure to use SpikingJellyMultiStep learningframework
#params.neuron.params.backend = 'cupy'
params.neuron.params.backend = 'torch'
params.gsp = true
params.batch_norm = true
disabled = true
