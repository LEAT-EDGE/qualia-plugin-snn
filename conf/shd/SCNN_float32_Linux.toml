[bench]
name = "SHD_SCNN_float32_Linux"
seed = 2
first_run = 1
last_run = 1
use_test_as_valid = true
plugins = ['qualia_plugin_snn']

[learningframework]
kind = 'SpikingJellyMultiStepTimeStepsInData'
params.devices = [1]

[experimenttracking]
kind = 'ClearML'
params.project_name = 'qualia-plugin-snn'
params.task_name = 'SHD_SCNN_float32_Linux'

[deploy]
#target = 'SPLEAT'
#converter.kind = 'SPLEAT'
#converter.params.output_feature_maps = [1, 2, 3, 4]
target = 'Linux'
converter.kind = 'QualiaCodeGen'
converter.params.timestep_mode = 'iterate' # Required for TimeStepsInData
quantize = ['float32']
optimize = ['']

[dataset]
kind = 'SHD'
params.path = "data/SHD/"

# [[preprocessing]]
# kind = "IntegrateEventsByFixedDuration"
# params.duration = 100000

[[preprocessing]]
kind = "IntegrateEventsByFixedFramesNumber"
params.split_by = 'number'
params.frames_num = 6

[[preprocessing]]
kind = "Group2TimeStepsBySample"
params.timesteps = 6

[[preprocessing]]
kind = "Class2BinMatrix"

[[data_augmentation]]
kind = "ExponentialNoise"
params.rate = 5.0
params.round_mode = 'floor'

[[data_augmentation]]
kind = "Cutout1D"
params.length_sigma = 0.1

[model_template]
kind = 'SCNN'
epochs = 400
batch_size = 256
#params.input_shape = [128, 128, 2]
params.timesteps = 6

[model_template.optimizer]
kind = "Adam"
params.lr               = 0.05
params.weight_decay	= 1e-4

[model_template.optimizer.scheduler]
kind = "MultiStepLR"
params.milestones	= [30, 60, 160, 240, 300, 340, 360, 380]
params.gamma		= 0.33

[[model]]
name = 'shd_scnn'
params.dims = 1
#params.filters = [24, 32, 48, 64]
params.filters = [16, 32, 64, 128, 128, 256, 256]
params.kernel_sizes = [7, 3, 3, 3, 3, 3, 3]
params.pool_sizes = [0, 0, 0, 0, 0, 0, 0]
params.dropouts = [0, 0, 0, 0, 0, 0, 0]
params.strides = [2, 2, 2, 2, 2, 2, 2]
params.paddings = [3, 1, 1, 1, 1, 1, 1]
params.fc_units = []
params.neuron.kind = 'LIFNode'
params.neuron.params.v_threshold = 1.0
params.neuron.params.v_reset = false
params.neuron.params.tau = 2.0
params.neuron.params.step_mode = 'm' # Multi-step mode, make sure to use SpikingJellyMultiStep learningframework
#params.neuron.params.backend = 'cupy'
params.neuron.params.backend = 'torch'
params.gsp = true
params.batch_norm = true
disabled = true

[[model]]
name = 'shd_scnn_small'
params.dims = 1
params.filters      = [8, 8, 16, 32, 64, 128, 256]
params.kernel_sizes = [7, 3,  3,  3,  3,   3,   3]
params.pool_sizes   = [0, 0,  0,  0,  0,   0,   0]
params.dropouts     = [0, 0,  0,  0,  0,   0,   0]
params.strides      = [2, 2,  2,  2,  2,   2,   2]
params.paddings     = [3, 1,  1,  1,  1,   1,   1]
params.fc_units     = []
params.neuron.kind = 'LIFNode'
params.neuron.params.v_threshold = 1.0
params.neuron.params.v_reset = false
params.neuron.params.tau = 2.0
params.neuron.params.step_mode = 'm' # Multi-step mode, make sure to use SpikingJellyMultiStep learningframework
#params.neuron.params.backend = 'cupy'
params.neuron.params.backend = 'torch'
params.gsp = true
params.batch_norm = true
disabled = false
