[bench]
name        = "EuroSat_QSNN_st4"
seed        = 6
first_run   = 1
last_run    = 3
plugins     = ["qualia_plugin_snn"]         # Enable SNN support

[learningframework]
kind = "SpikingJellyMultiStep"              # Multi-step processing for efficiency
params.devices  = [1]         # Number of devices to use

[dataset]
kind            = "EuroSAT"
params.path     = "../../../shared/EuroSAT"    # Path to extracted dataset
params.variant  = "MS"

[[preprocessing]]
kind = "Class2BinMatrix"

## Data Augmentation not in the paper, but useful for training
[[data_augmentation]]
kind = "Rotation2D"
params.before   = false    # Apply before GPU transfer
params.after    = true    # Apply after GPU transfer
params.evaluate = false # Use during inference

[[data_augmentation]]
kind = "HorizontalFlip"
params.before   = false    # Apply before GPU transfer
params.after    = true    # Apply after GPU transfer
params.evaluate = false # Use during inference

[[data_augmentation]]
kind = "GaussianNoise"
params.before   = false    # Apply before GPU transfer
params.after    = true    # Apply after GPU transfer
params.evaluate = false # Use during inference
##

[[postprocessing]]
kind                = "QuantizationAwareTraining"
export              = true
params.epochs       = 20
params.batch_size   = 512
params.model.params.quant_params.bits           = 8
params.model.params.quant_params.bias.quant_enable = true
#params.model.params.quant_params.force_q       = 4 
params.model.params.quant_params.quantype       = "fxp"
params.model.params.quant_params.roundtype      = "nearest"
params.model.params.quant_params.range_setting  = "minmax"
params.model.params.quant_params.input.quant_enable=true
params.model.params.quant_params.LSQ            = false

[[postprocessing]]
kind            = "FuseBatchNorm"   # All Batchnorm must be Fused before the estimation
export          = true
params.evaluate = false

[[postprocessing]]
kind = "OperationCounter"           # Information about Operations and Memory access

[[postprocessing]]
kind = "EnergyEstimationMetric"     
params.mem_width = 8
params.fifo_size = 64
params.total_spikerate_exclude_nonbinary    = true
params.op_estimation_type.add               = "ICONIP"
params.op_estimation_type.mul               = "saturation"
params.sram_estimation_type                 = "new"

# Model configuration
[model_template]
kind = "SCNN"  # Spiking CNN
params.dims         = 2
epochs              = 0
batch_size          = 512
params.timesteps    = 4                         # Number of timesteps for temporal processing
params.neuron.kind  = "IFNode"                  # Integrate and Fire Integrate-and-Fire neuron
params.neuron.params.v_threshold    = 1.0
params.neuron.params.v_reset        = false       # foat value for Hard reset
params.neuron.params.detach_reset   = true
params.neuron.params.step_mode      = "m"       # Multi-step mode
params.neuron.params.backend        = "torch"   # Use GPU acceleration if available

[model_template.optimizer]
kind = "Adam"
params.lr = 0.0002

[model_template.optimizer.scheduler]
kind = "CosineAnnealingLR"
params.T_max    = 20
params.eta_min  = 0.000001

##### Based network, SNN Maxpooling Linear ####
[[model]]
name = "eurosat_snn_16x16_st4"
load                = true
train               = true
params.filters 		= [16, 16]
params.kernel_sizes	= [3 , 3 ]
params.paddings		= [0, 0]
params.strides		= [1, 1]
params.pool_sizes	= [2, 1]
params.dropouts     = [0, 0]
params.fc_units     = [13456] 
params.gsp          = false                      # End with a global sum pooling
params.batch_norm	= true
disabled = false

[[model]]
name = "eurosat_snn_16x32_st4" 
load                = true
train               = true
params.filters 		= [16, 32]
params.kernel_sizes	= [3 , 3 ]
params.paddings		= [0, 0]
params.strides		= [1, 1]
params.pool_sizes	= [2, 1]
params.dropouts     = [0, 0]
params.fc_units     = [26912] 
params.gsp          = false                      # End with a global sum pooling
params.batch_norm	= true
disabled = false

[[model]]
name = "eurosat_snn_32x32x64_st4"
load                = true
train               = true
params.filters 		= [32, 32, 64]
params.kernel_sizes	= [3 , 3, 3 ]
params.paddings		= [0, 0, 0]
params.strides		= [1, 1, 1]
params.pool_sizes	= [2, 2, 1]
params.dropouts     = [0, 0, 0]
params.fc_units     = [9216] 
params.gsp          = false                      # End with a global sum pooling
params.batch_norm	= true
disabled = false
####

##### Tested network, SNN Stride Linear ####
[[model]]
name = "eurosat_snn_st_16x16_st4" 
load                = true
train               = true
params.filters 		= [16, 16]
params.kernel_sizes	= [3 , 3 ]
params.paddings		= [0, 0]
params.strides		= [2, 1]
params.pool_sizes	= [0, 0]
params.dropouts     = [0, 0]
params.fc_units     = [13456] 
params.gsp          = false                      # End with a global sum pooling
params.batch_norm	= true
disabled = false

[[model]]
name = "eurosat_snn_st_16x32_st4" 
load                = true
train               = true
params.filters 		= [16, 32]
params.kernel_sizes	= [3 , 3 ]
params.paddings		= [0, 0]
params.strides		= [2, 1]
params.pool_sizes	= [0, 0]
params.dropouts     = [0, 0]
params.fc_units     = [26912] 
params.gsp          = false                      # End with a global sum pooling
params.batch_norm	= true
disabled = false

[[model]]
name = "eurosat_snn_st_32x32x64_st4" 
load                = true
train               = true
params.filters 		= [32, 32, 64]
params.kernel_sizes	= [3 , 3, 3 ]
params.paddings		= [0, 0, 0]
params.strides		= [2, 2, 1]
params.pool_sizes	= [0, 0, 0]
params.dropouts     = [0, 0, 0]
params.fc_units     = [10816] 
params.gsp          = false                      # End with a global sum pooling
params.batch_norm	= true
disabled = false
####

##### Tested network, SNN Stride GSP ####
[[model]]
name = "eurosat_snn_st_gsp_16x16_st4" 
load                = true
train               = true
params.filters 		= [16, 16]
params.kernel_sizes	= [3 , 3 ]
params.paddings		= [0, 0]
params.strides		= [2, 1]
params.pool_sizes	= [0, 0]
params.dropouts     = [0, 0]
params.fc_units     = [] 
params.gsp          = true                      # End with a global sum pooling
params.batch_norm	= true
disabled = false

[[model]]
name = "eurosat_snn_st_gsp_16x32_st4" 
load                = true
train               = true
params.filters 		= [16, 32]
params.kernel_sizes	= [3 , 3 ]
params.paddings		= [0, 0]
params.strides		= [2, 1]
params.pool_sizes	= [0, 0]
params.dropouts     = [0, 0]
params.fc_units     = [] 
params.gsp          = true                      # End with a global sum pooling
params.batch_norm	= true
disabled = false

[[model]]
name = "eurosat_snn_st_gsp_32x32x64_st4" 
load                = true
train               = true
params.filters 		= [32, 32, 64]
params.kernel_sizes	= [3 , 3, 3 ]
params.paddings		= [0, 0, 0]
params.strides		= [2, 2, 1]
params.pool_sizes	= [0, 0, 0]
params.dropouts     = [0, 0, 0]
params.fc_units     = [] 
params.gsp          = true                      # End with a global sum pooling
params.batch_norm	= true
disabled = false
####

##### Tested network, SNN Maxpooling GSP ####
[[model]]
name = "eurosat_snn_gsp_16x16_st4" 
load                = true
train               = true
params.filters 		= [16, 16]
params.kernel_sizes	= [3 , 3 ]
params.paddings		= [0, 0]
params.strides		= [1, 1]
params.pool_sizes	= [2, 1]
params.dropouts     = [0, 0]
params.fc_units     = [] 
params.gsp          = true                      # End with a global sum pooling
params.batch_norm	= true
disabled = false

[[model]]
name = "eurosat_snn_gsp_16x32_st4" 
load                = true
train               = true
params.filters 		= [16, 32]
params.kernel_sizes	= [3 , 3 ]
params.paddings		= [0, 0]
params.strides		= [1, 1]
params.pool_sizes	= [2, 1]
params.dropouts     = [0, 0]
params.fc_units     = [] 
params.gsp          = true                      # End with a global sum pooling
params.batch_norm	= true
disabled = false

[[model]]
name = "eurosat_snn_gsp_32x32x64_st4" 
load                = true
train               = true
params.filters 		= [32, 32, 64]
params.kernel_sizes	= [3 , 3, 3 ]
params.paddings		= [0, 0, 0]
params.strides		= [1, 1, 1]
params.pool_sizes	= [2, 2, 1]
params.dropouts     = [0, 0, 0]
params.fc_units     = [] 
params.gsp          = true                      # End with a global sum pooling
params.batch_norm	= true
disabled = false
####
